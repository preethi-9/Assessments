# -*- coding: utf-8 -*-
"""LVADSUSR103_Preethi_L_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Oz8DxSlNehvZ7Ey0V1EiAMpUucuuY42s
"""

# Hotel Booking Prediction
#importing libraries

import pandas as pd
import numpy as np
import warnings as wr
wr.filterwarnings("ignore")
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report,accuracy_score,confusion_matrix,precision_score, recall_score, f1_score

# 1
#loading dataset
data_1 = pd.read_csv("/content/drive/MyDrive/booking.csv")
#getting information bout the dataset
data_1.info()

# finding any null values
print(data_1.isnull().sum())
#there is no null values as the output itself tells about this

# finding any duplicates
data = data_1.drop_duplicates()

#outliers detection
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
#InterQuartile Range
IQR = Q3 - Q1
threshold_value = 1.5
Outliers = (data < (Q1 - threshold_value * IQR)) | (data  > (Q3 + threshold_value * IQR))
data_file = data[~Outliers.any(axis=1)]

# droping the unnecessary columns
data_cleaning = data.drop(['Booking_ID', 'date of reservation'], axis=1)
data_cleaning.head()

# encoding the categorical columns using Label Encoding metod
label_encoder = LabelEncoder()
data_cleaning['type of meal'] = label_encoder.fit_transform(data_cleaning['type of meal'])
data_cleaning['room type'] = label_encoder.fit_transform(data_cleaning['room type'])
data_cleaning['market segment type'] = label_encoder.fit_transform(data_cleaning['market segment type'])
data_cleaning['booking status'] = label_encoder.fit_transform(data_cleaning['booking status'])

# Feature and label extraction
X = data_cleaning.drop(['booking status'], axis=1)
y = data_cleaning['booking status']

# Splitting the Data into Train and Test Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model building using Logistic Regression
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluating of Logistic Regression model performance
accuracy_value = accuracy_score(y_test,y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
cls_report = classification_report(y_test,y_pred)

# output
print("The Accuracy is :", accuracy_value,"\n")
print("Precision value is :", precision,"\n")
print("Recall:", recall,"\n")
print("F1 Score is :", f1,"\n")
print("Confusion Matrix:\n", conf_matrix,"\n")
print("Classification report is : ",cls_report,"\n")