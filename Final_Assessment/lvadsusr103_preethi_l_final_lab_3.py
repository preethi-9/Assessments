# -*- coding: utf-8 -*-
"""LVADSUSR103_Preethi_L_Final_lab_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rVJhgUg-JkfvQoYFq7_YEpXF0l6Sf1Ec
"""

#3
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score,f1_score,mean_squared_error,r2_score,classification_report,silhouette_score,confusion_matrix

data = pd.read_csv("/content/drive/MyDrive/seeds.csv")
data

data.shape

data.info()

data.describe()

data.head(10)

data.duplicated().sum()

#handling missing values
data.fillna(data.mean(), inplace=True)

data.corr()

# standardizing the numeriocal columns
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)

# Histogram view of numerical columns in the data
data.hist(figsize=(12, 8))
plt.tight_layout()
plt.show()

# Pairplot chary for the  numerical columns
sns.pairplot(data, diag_kind='kde')
plt.show()

# Correlation heatmap for the columns
plt.figure(figsize=(9, 9))
sns.heatmap(data.corr(), annot=True, cmap='viridis', fmt='.4f')
plt.title('Heatmap of Seeds data!')
plt.show()

#optimal number of clusters defining
inertia_values = []
silhouette_scores = []
k_values = range(2, 10)

for i in k_values:
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(scaled_data)
    inertia_values.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_data, kmeans.labels_))

# line plot for clusters
plt.plot(k_values, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for Optimal k')
plt.xticks(k_values)
plt.show()

plt.plot(k_values, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')
plt.xticks(k_values)
plt.show()

#clustering algorithm application
optimal_k = 7
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(scaled_data)

cluster_labels = kmeans.predict(scaled_data)

silhouette_avg = silhouette_score(scaled_data, cluster_labels)
print("Average silhouette score: ",silhouette_avg)

#cluster analysis
data['Cluster'] = kmeans.labels_
cluster_profiles = data.groupby('Cluster').mean()
print(cluster_profiles)