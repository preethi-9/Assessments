# -*- coding: utf-8 -*-
"""LVADSUSR103_Preethi_L_Final_lab_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xQSHYr3URYxNvUrPNiq9pbhQpt0ZHG0S
"""

#2
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score,f1_score,mean_squared_error,r2_score,classification_report,confusion_matrix

data = pd.read_csv("/content/drive/MyDrive/auto-mpg.csv")
data

data.shape

data.info()

data.describe()

data.duplicated().sum()

data.isnull().sum()

data.fillna(data.mean(), inplace=True)

data.isnull().sum()

data.head(10)

# replacing the missing values in horsepower columns
data['horsepower'] = data['horsepower'].replace('?', np.nan)

data['horsepower'] = pd.to_numeric(data['horsepower'], errors='coerce')

data['horsepower'].fillna(data['horsepower'].mean(), inplace=True)

data.isna().sum()

#outliers
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
thershold = 1.5
#interquartile range
IQR = Q3-Q1
outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)

data1 = data[~outliers]
data1

data1.shape

data1.drop(columns=['car name'], inplace=True)

data.corr()

sns.histplot(data1['mpg'], kde=True)
plt.title('Distribution of FUEL EFFICIENCY in Automative Manufacturing (mpg)')
plt.xlabel('mpg')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(15, 9))
num_cols = ['cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']
for j, cols in enumerate(num_cols, 1):
    plt.subplot(2, 3, j)
    sns.scatterplot(x=cols, y='mpg', data=data1)
    plt.title('{} vs. mpg'.format(cols))
plt.tight_layout()
plt.show()

X = data1.drop(columns=['mpg'])
y = data1['mpg']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

#finding important metrics for this data
y_pred = model.predict(X_test)
mse =  mean_squared_error(y_test, y_pred)
r2_Score = r2_score(y_test, y_pred)
print("Mean Squared Error: ",mse)
print("\nR-squared: ",r2_Score)