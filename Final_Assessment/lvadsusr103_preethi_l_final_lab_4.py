# -*- coding: utf-8 -*-
"""LVADSUSR103_Preethi_L_Final_lab_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRLJJNafGZhEIZJ0Tz2mMRYbmGd21Rab
"""

#4
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor,IsolationForest
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,MinMaxScaler,LabelEncoder
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score,f1_score,mean_squared_error,r2_score,classification_report,silhouette_score,confusion_matrix

data = pd.read_csv("/content/drive/MyDrive/social_network.csv")
data

data.shape

data.describe()

data.info()

# Handling the missing values
print(data.isnull().sum())

#outliers
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
thershold = 1.5
#interquartile range
IQR = Q3-Q1
outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)

data1 = data[~outliers]
data1

data1.shape

# Histogram chart of numerical columns
data.hist(figsize=(11, 9))
plt.tight_layout()
plt.show()

# Pairplot of numerical features
sns.pairplot(data, diag_kind='kde')
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='viridis', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

# Encoding data
label_encoder = LabelEncoder()
data['account_status'] = label_encoder.fit_transform(data['account_status'])

# Extracting significant features
features = ['login_activity', 'posting_activity', 'social_connections']
data['is_outlier'] = outliers

X = data[features]
y = data['is_outlier']

#Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model development
model = IsolationForest(n_estimators=100, contamination=0.1, max_features=3, max_samples=10000, random_state=42)
model.fit(X_train)

# Predict the anomalies in the data
y_pred = model.predict(X_train)

# Add the predicted anomaly scores to the original dataframe
data["anomaly_score"] = model.decision_function(X)
anomalies = data.loc[data["anomaly_score"] < 0]

# Create a scatter plot of suspicious activity vs social connections
plt.scatter(data["social_connections"], data["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["social_connections"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Social Connections")
plt.ylabel("Anomaly Score")
plt.legend()
plt.show()